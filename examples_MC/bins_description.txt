- There are 32 register files available, with index from 0 to 31.
- Register 0 is denoted as "zero", and its content is always 0.
- DO NOT SUPPLY 0x00000000 AS THE INSTRUCTION!
- There are 14 available types of operations (ONLY USE THESE!):
---
OPERATIONS
  - R-type (format: [opcode (6 bits)][rs (5 bits)][rt (5 bits)][rd (5 bits)][sa (5 bits)][function (6 bits)]):
    - ADD (opcode: 000000, function: 100000): addition between two register files
    - SUB (opcode: 000000, function: 100010): subtraction between two register files
    - AND (opcode: 000000, function: 100100): logical operation AND between two register files
    - OR (opcode: 000000, function: 100101): logical operation OR between two register files
    - XOR (opcode: 000000, function: 100110): logical operation XOR between two register files
    - SLL (opcode: 000000, function: 001111): logical shift left a register file by number of bits equal to another register file
    - SRL (opcode: 000000, function: 000010): logical shift right a register file by number of bits equal to another register file
    - SRA (opcode: 000000, function: 000011): arithmetic shift right a register file by number of bits equal to another register file
    - SLT (opcode: 000000, function: 101010): make comparison between two register files; if the first one is smaller, write 1 to a register file, otherwise write 0
    - SLTU (opcode: 000000, function: 101011): make comparison between two unsigned register files; if the first one is smaller, write 1 to a register file, otherwise write 0
  - I-type (format: [opcode (6 bits)][rs (5 bits)][rt (5 bits)][immediate (16 bits)]):
    - SW (opcode: 101011): store a word (a 32-bit value) from a register file to the data memory at the address equal to a register file
    - SH (opcode: 101001): store a half-word (a 16-bit value) from a register file to the data memory at the address equal to a register file
    - SB (opcode: 101000): load a byte (an 8-bit value) from a register file to the data memory at the address equal to a register file
  - J-type (format: [opcode (6 bits)][instr_index (26 bits)]):
    - JAL (opcode: 000011): store the address of next instruction as the return address in a register file, then jump (increase PC) by an immediate (i.e. constant value)
---

- BIN type 1: Make the CPU perform each operation at least once.
- BIN type 2: For each R-type or J-type operation, make the CPU execute an instruction with register zero as the destination register (rd).
- BIN type 3: For each R-type or I-type operation, make the CPU execute an instruction with register zero as one of the source registers (rs).
- BIN type 4: For each R-type or I-type operation, make the CPU execute an instruction where both source registers are the same register file.
- BIN type 5: For the JAL operation, make the CPU execute both forward jumps and backward jumps.

- Read-after-Write (RaW) hazard: happens when the current instruction reads from a register which the previous instruction wrote to.
- BIN type 6: For each R-type or I-type operation following an R-type or J-type operation, make the CPU execute two instructions that would cause an RaW hazard.
